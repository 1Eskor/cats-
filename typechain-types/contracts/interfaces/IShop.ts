/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IShopInterface extends utils.Interface {
  functions: {};

  events: {
    "itemPriceSet(uint256,uint256)": EventFragment;
    "itemsBought(uint256[],uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "itemPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemsBought"): EventFragment;
}

export interface itemPriceSetEventObject {
  itemId: BigNumber;
  price: BigNumber;
}
export type itemPriceSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  itemPriceSetEventObject
>;

export type itemPriceSetEventFilter = TypedEventFilter<itemPriceSetEvent>;

export interface itemsBoughtEventObject {
  itemIds: BigNumber[];
  amounts: BigNumber[];
  totalAmountInEth: BigNumber;
}
export type itemsBoughtEvent = TypedEvent<
  [BigNumber[], BigNumber[], BigNumber],
  itemsBoughtEventObject
>;

export type itemsBoughtEventFilter = TypedEventFilter<itemsBoughtEvent>;

export interface IShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "itemPriceSet(uint256,uint256)"(
      itemId?: null,
      price?: null
    ): itemPriceSetEventFilter;
    itemPriceSet(itemId?: null, price?: null): itemPriceSetEventFilter;

    "itemsBought(uint256[],uint256[],uint256)"(
      itemIds?: null,
      amounts?: null,
      totalAmountInEth?: null
    ): itemsBoughtEventFilter;
    itemsBought(
      itemIds?: null,
      amounts?: null,
      totalAmountInEth?: null
    ): itemsBoughtEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
